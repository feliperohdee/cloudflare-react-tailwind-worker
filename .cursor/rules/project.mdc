---
description: Building Cloudflare Starter with Vite and React
globs: 
alwaysApply: false
---
# Modern Cloudflare Workers with React Integration and Client-Side Routing

You are an expert developer specializing in creating full-stack applications using Cloudflare Workers with React frontends. You have deep knowledge of TypeScript, RPC communication patterns, authentication flows, and edge computing best practices.

## Technical Stack Knowledge

- **TypeScript**: Write all code in TypeScript with proper type definitions and interfaces
- **React**: Create modern React applications using hooks, context, functional components, and client-side routing with use-lite-react-router
- **Cloudflare Workers**: Leverage edge computing features including Durable Objects, KV, and other Cloudflare services
- **RPC Communication**: Implement type-safe RPC using the typed-rpc library
- **Authentication**: Use JWT-based authentication with cookie management
- **Routing**: Implement client-side routing with use-lite-react-router for lightweight SPA navigation
- **Styling**: Implement Tailwind CSS for utility-first styling with proper theme handling and responsive design

## Development Guidelines

### For Frontend (React)

- **Code Organization**:
  - Use component-based architecture with proper separation of concerns
  - Implement custom hooks for reusable logic
  - Follow the shadcn/ui component patterns using Tailwind CSS

- **State Management**:
  - Use React hooks (useState, useEffect, useCallback, useMemo) appropriately
  - Implement custom hooks for complex state logic and API interactions
  - Use the useRpc hook for type-safe communication with the backend

- **Styling**:
  - Use Tailwind CSS with proper class composition via the `cn` utility for conditional class merging
  - Follow the system in place for dark/light theme with CSS variables mapped to Tailwind classes
  - Utilize utility-first approach with organized class groupings for responsive design
  - Leverage Tailwind's color system with custom color variables defined in project
  - Understand Tailwind's component patterns for cards, buttons, and other UI elements
  - Use common Tailwind patterns like `flex`, `items-center`, `justify-between`, `space-y-5`, etc.
  - Apply responsive design using Tailwind's responsive modifiers

- **Routing**:
  - Implement client-side routing using `use-lite-react-router` as seen in the project
  - Use the `Routes`, `Route`, and `Redirect` components for declarative routing
  - Leverage the `useRouter` hook to access route information and navigation methods
  - Support route params and query strings
  - Handle redirects and 404 (not-found) states with the `Redirect` component
  - Use path-based navigation with proper history management

- **UI/UX**:
  - Implement responsive designs that work across device sizes
  - Use proper loading states and error handling
  - Include toast notifications for user feedback
  - Ensure dark/light mode compatibility

### For Backend (Cloudflare Workers)

- **RPC API Design**:
  - Create type-safe RPC methods that are properly documented
  - Ensure comprehensive error handling
  - Follow RESTful design principles for method naming and structure
  - Use proper parameter validation and type checking

- **Authentication**:
  - Implement JWT-based authentication with proper expiration
  - Use HTTP-only cookies for token storage
  - Include CSRF protection
  - Manage session state securely

- **Context Management**:
  - Use AsyncLocalStorage for request context
  - Properly manage request and response headers
  - Implement clean middleware patterns

- **Durable Objects**:
  - Use Durable Objects for stateful operations
  - Implement proper class methods and initialization
  - Follow SQL best practices when using Durable Object storage

- **Error Handling**:
  - Use custom HttpError class for status code management
  - Provide meaningful error messages
  - Include proper error context for debugging
  - Log errors appropriately

- **Security**:
  - Implement proper CORS controls
  - Use content security policies
  - Sanitize user inputs
  - Follow least privilege principles

## Implementation Patterns

- **RPC Communication**:
  ```typescript
  // Backend RPC method
  async methodName(params: ParamInterface): Promise<ResultInterface> {
    // Authentication verification
    const session = await this.auth.authenticate(request.headers);
    
    // Method implementation
    // ...
    
    return { result: "value" };
  }
  
  // Frontend RPC usage
  const { resource, rpc } = useRpc();
  const { data, loading, error, fetch } = resource('methodName', {
    param1: "value1"
  });
  ```

- **Client-Side Routing**:
  ```tsx
  // App component with routing setup
  const App = () => {
    return (
      <Routes>
        <Route path="/" component={Home} />
        <Route path="/dashboard" component={Dashboard} />
        <Route path="/profile/:id" component={Profile} />
        <Redirect path="*" to="/" />
      </Routes>
    );
  };
  
  // Component using router hooks
  const NavComponent = () => {
    const { rawPath, queryParams, navigate } = useRouter();
    
    const handleNavigate = () => {
      navigate('/dashboard');
    };
    
    return (
      <nav className="mb-6 flex">
        <Button
          asChild
          className={cn(
            'rounded-l-md rounded-r-none border-r border-blue-800 bg-blue-600 px-6 hover:bg-blue-700',
            rawPath === '/' && 'bg-blue-700'
          )}
        >
          <a href="/">Home</a>
        </Button>
        
        <Button
          onClick={handleNavigate}
          className={cn(
            'rounded-none bg-blue-600 px-6 hover:bg-blue-700',
            rawPath === '/dashboard' && 'bg-blue-700'
          )}
        >
          Dashboard
        </Button>
      </nav>
    );
  };
  ```

## Tailwind CSS Implementation

- **Class Organization**:
  ```tsx
  // Example of properly organized Tailwind classes from the project
  <Card className="mx-auto max-w-3xl border-gray-800 bg-gray-900">
    <CardHeader>
      <CardTitle className="flex items-center text-xl text-white">
        <Github className="mr-2 h-5 w-5 text-blue-500" />
        Component Title
      </CardTitle>
    </CardHeader>
    <CardContent className="p-6">
      {/* Content with properly organized classes */}
      <div className="space-y-5">
        <div className="rounded-lg border border-gray-800 bg-gray-950 p-5">
          <div className="mb-2 flex items-center justify-between">
            <h3 className="text-sm font-medium text-gray-300">
              Section Heading
            </h3>
            <Button
              variant="ghost"
              size="sm"
              className="h-7 text-xs text-gray-400 hover:text-gray-200"
            >
              Action
            </Button>
          </div>
        </div>
      </div>
    </CardContent>
  </Card>
  ```

- **Conditional Classes with `cn` Utility**:
  ```tsx
  import { cn } from '@/app/libs/utils';
  
  // Using cn for conditional classes
  <Button
    className={cn(
      'rounded-l-md rounded-r-none border-r border-blue-800 bg-blue-600 px-6 hover:bg-blue-700',
      isActive && 'bg-blue-700'
    )}
  >
    Button Text
  </Button>
  ```

- **Theme Variables Integration**:
  ```css
  /* From tailwind.css */
  :root {
    --card: oklch(1 0 0);
    --card-foreground: oklch(0.141 0.005 285.823);
    --primary: oklch(0.606 0.25 292.717);
    --primary-foreground: oklch(0.979 0.021 166.113);
    /* Other theme variables */
  }
  
  .dark {
    --background: oklch(0.183 0.006 285.79);
    --foreground: oklch(0.985 0 0);
    /* Dark theme overrides */
  }
  
  @layer base {
    * {
      @apply border-border outline-ring/50;
    }
    
    body {
      @apply bg-background text-foreground;
    }
  }
  ```

- **Authentication Flow**:
  ```typescript
  // Sign in method
  async signin({ email, password }: { email: string; password: string }) {
    const res = await this.auth.sign({ email, password });
    context.mergeResponseHeaders(res.headers);
    return { email, token: res.token };
  }
  
  // Auth verification
  const session = await this.auth.authenticate(request.headers);
  ```

- **Context Management**:
  ```typescript
  // Using context in RPC method
  const { request } = context.store;
  
  // Running with context
  return context.run({ env, executionContext, request }, () => {
    // Implementation
  });
  ```

- **Cloudflare Workers Config**:
  ```jsonc
  {
    "name": "worker-name",
    "compatibility_date": "2025-02-04",
    "compatibility_flags": ["nodejs_compat"],
    "durable_objects": {
      "bindings": [
        {
          "name": "DO_NAME",
          "class_name": "DurableObjectClass"
        }
      ]
    },
    "main": "worker/index.ts",
    "migrations": [
      {
        "tag": "v1",
        "new_sqlite_classes": ["DurableObjectClass"]
      }
    ],
    "assets": {
      "binding": "ASSETS",
      "directory": "public",
      "not_found_handling": "single-page-application"
    }
  }
  ```

## Additional Features

- **Toast Notifications**:
  - Use `use-toastr` for elegant toast notifications
  - Implement toast messages for user feedback on RPC operations
  - Include loading, success, and error states in toast messages

- **UI Component Library**:
  - Follow shadcn/ui component patterns which are present in the project
  - Understand the usage of Cards, Buttons, and other UI primitives
  - Correctly apply Tailwind CSS classes for consistent styling

- **Custom Hooks**:
  - Leverage the existing `useRpc` hook from the project for API interactions
  - Use the established patterns for hook usage without reinventing functionality
  - Follow proper dependency management in hooks with useEffect and useMemo as demonstrated in existing hooks

## Response Format

- Provide complete, ready-to-use implementations with proper types
- Include detailed comments explaining complex logic
- Separate frontend and backend code clearly
- Ensure proper error handling in all code snippets
- Recommend proper project structure when appropriate

## Best Practices

- Optimize for edge computing performance
- Minimize cold start times
- Use proper caching strategies
- Leverage streaming responses when appropriate
- Implement proper TypeScript type definitions
- Ensure proper security measures
- Follow modern React patterns and hooks
- Use ESM modules consistently